I"P <h2 id="1-what-is-a-graph-database">1. What is a graph database?</h2>
<p>Graph Databases take business and user needs (i.e what you want your application to do) and transform them into a structure for sorting data. The performance of this graph database remains consistent even as data volume and connections between data points increases. It is flexible, as you can keep adding to the existing graph without endangering the current functionality. It allows us to label data in order to group it and establish trends, and ask questions about our information.</p>

<p><strong>Node + Relationships</strong></p>
<ul>
  <li>A node can be a person, place, thing etc.</li>
  <li>A relationship tells us how 2 nodes are associated</li>
</ul>

<p><img src="/assets/img/twitter-users-graph-database-model.png" alt="Image" /></p>

<p>Nodes can be <strong>labelled</strong> with multiple labels to make it easier to group them.
You can add <strong>properties</strong> to nodes and relationships to add more information to the graph.</p>

<h2 id="2-creating-a-graph-database">2. Creating a graph database</h2>

<ul>
  <li>CREATE (The Matrix: Movie {title: “The Matrix”, released 1999, tagline: “Welcome to the Real World”})</li>
  <li>CREATE (Keanu: Person {name: “Keanu Reeves”, born: 1964})</li>
  <li>CREATE (Keanu)-[:ACTED_IN{roles:”Neo”}) -&gt; (The Matrix)</li>
</ul>

<h3 id="creating-nodes">Creating nodes</h3>
<p><strong>Node</strong>: A representation of a domain entity with labels, properties and relationships</p>
<ul>
  <li>Generally: CREATE (optionalVariable: optionalLables {optionalProperties})</li>
</ul>

<p>You can create multiple nodes by separating with a comma:</p>
<ul>
  <li>CREATE (:Person {name: “Michael Caine”, born: 1933}), (:Person {name: “Liam Neeson”, born: 1952}), (:Person {name: “Katie Holmes”, born: 1978})</li>
</ul>

<p>To add a label to a node: SET x: Label</p>
<ul>
  <li>Eg. MATCH (m:Movie) WHERE m.title = ‘Batman Begins’ SET m: Action RETURN labels(m)</li>
</ul>

<p>To remove a label from a node: REMOVE x: Label</p>

<p>To add Properties to a node: SET x.PropertyName = value</p>
<ul>
  <li>To add multiple properties you have two methods:
    <ol>
      <li>MATCH (m:Movie) WHERE m.title = ‘Batman Begins’ SET m.released = 2005, m.lengthInMinutes = 140 RETURN m</li>
      <li>MATCH (m:Movie) WHERE m.title = ‘Batman Begins’ SET m = {title = ‘Batman Begins’, released = 2006, videoFormat = “DVD”} RETURN m</li>
      <li>MATCH (m:Movie) WHERE m.title += ‘Batman Begins’ SET m = {released = 2006, videoFormat = “DVD”} RETURN m</li>
    </ol>
  </li>
</ul>

<p><strong>SET =</strong> must include all of the properties for the relationship where as <strong>SET +=</strong> adds or updates the properties. = instead of += could remove existing properties if they aren’t included in the set.</p>

<p>To remove a property: REMOVE x.propertyName or SET x.propertyName = NULL</p>

<h3 id="creating-relationships">Creating Relationships</h3>

<ul>
  <li>CREATE(x)-[:REL_TYPE]-&gt;(y)</li>
</ul>

<p>When you create a relationship, you must give it a direction.</p>

<p>To identify two nodes you want to create a relationship between:</p>
<ul>
  <li>Eg. MATCH (a:Person), (m:Movie) WHERE a.name = “Michael Caine” AND m.title = “Batman Begins” CREATE (a)-[:ACTED_IN]-&gt;(m) RETURN a, m</li>
</ul>

<p>This gives us (Michael Caine) – ACTED IN –&gt; (Batman Begins)</p>

<p>To delete relationships you must first identify which relationship you want to remove:</p>
<ul>
  <li>MATCH (a:Person)-[rel:ACTED_IN]-&gt;(m:Movie) WHERE a.name = “Christian Bale” AND m.title = “Batman Begins” DELETE rel RETURN a, m</li>
</ul>

<p>To delete both a node and a relationship: MATCH (p:Person) WHERE p.name = “Liam Neeson” DETACH DELETE p</p>

<p><img src="/assets/img/graph%20-%20Superiors.png" alt="relationships between office workers" /></p>

<h3 id="merge">MERGE</h3>

<ul>
  <li><strong>MERGE</strong> will prevent the creation of a node with the same properties as a node that already exists (i.e duplicates)</li>
</ul>

<p>If you use CREATE:</p>
<ol>
  <li>If a <strong>node</strong> with the same property value exists, a duplicate is created</li>
  <li>If the <strong>label</strong> already exists for the node, the node isn’t updated</li>
  <li>If the <strong>relationship</strong> exists, a duplicate relationship is created</li>
  <li>If the <strong>node or relationship property</strong> already exists it is updated with a new value</li>
</ol>

<p>WARNING: You should avoid creating duplicate nodes/relationships in a graph</p>

<p><strong>MERGE</strong> is used to find elements in a graph. If those elements aren’t found, merge creates them.</p>

<ul>
  <li>MERGE(variable: Label {nodeProperties}) RETURN variable</li>
  <li>Eg. MERGE (a:Actor {name: “Michael Caine”}) SET a.born = 1933 RETURN a</li>
</ul>

<p>MERGE to create relationships</p>
<ul>
  <li>MERGE (variable: Label {nodeProperties})-[REL_TYPE]-&gt;(otherNode) RETURN variable</li>
  <li>Eg. MERGE (a:Person {name: “Emma Watson”}) ON CREATE SET a.birthPlace = “Paris”, a.born = 1990 RETURN a</li>
</ul>

<h2 id="3-how-do-we-query-the-graph">3. How do we query the graph?</h2>
<p>neo4j uses <strong>CYPHER</strong>, a declarative query language to get information from the graph.</p>

<ul>
  <li>Eg. CREATE (:Label{Property})-[:RELATIONSHIP]-&gt;(Label{Property})</li>
  <li>CREATE (:Person{name: “Harry”}) -[:LOVES] (:Person {name: “Tom”})</li>
</ul>

<p>Nodes are represented by () or (n). To retrieve all the nodes in your graph use MATCH (n) RETURN n. () is an anonymous node. (n) tells the database ‘for this query, use the variable n to represent nodes’. You can filter the type of node you are searching for by specifying labels, eg. (variable: Label1: Label2) eg. (p: Actor: Director) to get people who are both actors and directors.</p>

<p><strong>CALL db.schema</strong> returns information about nodes, labels and relationships in the graph. It tells you what relationships exist and how nodes are linked so you get an overview of the the graph structure.</p>

<p><strong>MATCH</strong> performs a pattern match against the data in the graph eg. MATCH (variable) RETURN variable</p>

<p><strong>CALL db.propertyKeys</strong> returns all the property keys in the database.</p>

<p>You can return <strong>type(n)</strong> where n is a relationship and you want to know its type.</p>

<p><strong>WHERE</strong> is also a key word to use in searches.</p>
<ul>
  <li>Eg. MATCH (a)-[n]-&gt;(m) WHERE a:Person and type(n) = ‘WROTE’ AND m.movie RETURN a.name AS name, m.title as Movie</li>
  <li>This can also be replaced by WHERE NOT to get all the people who do not relate to a property</li>
  <li>WHERE is also useful for string manipulation queries. You can search for people whose name’s <strong>START WITH</strong> ‘Esther’ or <strong>CONTAINS</strong> ‘fun’, or <strong>WHERE</strong> m.released <strong>IN</strong> [2000, 2004] to get all movies released in 2000 and 2004.</li>
</ul>

<h3 id="examples">Examples</h3>
<ul>
  <li>Retrieve nodes as list: MATCH (p:Person)-[:ACTED_IN]-&gt;(m:Movie) RETURN p.name, <strong>collect(m.title)</strong></li>
  <li>Count: MATCH (p:PERSON)-[:ACTED_IN]-&gt;(m:Movie) RETURN m.title, count(p), collect(p.name)</li>
  <li>Actors who have acted in exactly 5 movies: MATCH (a:Person)-[:ACTED_IN]-&gt;(m:Movie) WITH a, count(a), collect(m.title) WHERE count(a) = 5 RETURN a.name, collect (m.title)</li>
  <li>Movies with at least 2 directors and other optional data: MATCH (m:Movie) with m, size((:Person)-[:DIRECTED]-&gt;(m)) AS directors WHERE directors &gt;=2 OPTIONAL MATCH (p:Person)-[:REVIEWED]-&gt;(m) RETURN m.title, p.name</li>
</ul>

<p><strong>DISTINCT</strong> retrieves only unique results</p>

<h2 id="4-conclusion">4. Conclusion</h2>

<p>This is the basic understanding I have gained from following neo4j tutorials and reading around online for the last couple of days. It’s a very fun software to play with, and helps to display data in a visually interesting and useful manner. In the future I’d like to continue learning to see how I can upload csv files and write more complex queries.</p>
:ET